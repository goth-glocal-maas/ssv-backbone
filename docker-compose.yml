version: "3"
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.4
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --api
    #   # - --api.insecure=true
      - --providers.docker
    #   # - --providers.docker.exposedbydefault=false
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml
      - ./traefik/dynamic:/traefik-conf
    networks:
      - proxy_default
    # labels:
    #   traefik.enable: true
    #   traefik.http.routers.dashboard.rule: Host(`example.net`)
    #   traefik.http.routers.dashboard.service: api@internal
    #   traefik.http.routers.dashboard.middlewares: test-auth
    #   traefik.http.middlewares.test-auth.basicauth.users: test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0

  supplements:
    build: ./supplements
    environment:
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "11776:8080"
    volumes:
      - ./public/media:/root/app/media
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MEDIA_DIR: ${UPLOAD_DIR}
  # caddy:
  #   image: abiosoft/caddy:no-stats
  #   volumes:
  #     - ./Caddyfile:/etc/Caddyfile
  #     - ./:/code
  #   ports:
  #     - "1178:2015"

  redis:
     image: redis:alpine
     ports:
      - "6379:6379"

  # hasura:
  #   container_name: graphql
  #   image: hasura/graphql-engine:v1.3.0
  #   restart: always
  #   environment:
  #     HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
  #     HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
  #     HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
  #     HASURA_GRAPHQL_JWT_SECRET: ${ENCRYPTION_KEY}
  #     HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URL}
  #   ports:
  #     - "11775:8080"

  db:
    container_name: postgis
    image: mdillon/postgis:11-alpine
    restart: always
    environment:
      POSTGRES_USER: sipp11
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: --data-checksums
      POSTGRES_USER: sipp11
    volumes:
      - goth-data:/var/lib/postgresql/data
    ports:
      - "25435:5432"
    command: postgres -c 'max_connections=300'


volumes:
  goth-data:

networks:
  proxy_default:
    external: true